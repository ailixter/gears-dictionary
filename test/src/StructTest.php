<?php

namespace Ailixter\Gears\Dictionary;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-11-12 at 22:01:23.
 */
class StructTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Struct
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Struct([
            'n' => ['a', 'b', ['c' => 123]],
            'x' => ['y' => 456]
        ]);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers \Ailixter\Gears\Collection\Data::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        self::assertEquals(456, $this->object->get('x/y'));
        self::assertEquals(456, $this->object->get('/x/y'));
        self::assertEquals(456, $this->object->get('x//y'));
        self::assertEquals(456, $this->object->get('x/y/'));
        self::assertEquals(456, $this->object->get('x/y//'));
        self::assertEquals(456, $this->object->get('//x/y'));
        self::assertEmpty($this->object->get('x/0'));
        self::assertEquals('default', $this->object->get('x.y', 'default'));
    }

    /**
     * @covers Ailixter\Gears\Collection\Data::get
     * @todo   Implement testGet().
     */
    public function testGetN()
    {
        self::assertEquals('a', $this->object->get('n/0'));
        self::assertEquals('b', $this->object->get('n/1'));
        self::assertEquals(123, $this->object->get('n/2/c'));
    }

    /**
     * @covers Ailixter\Gears\Collection\Data::get
     * @covers Ailixter\Gears\Collection\Data::set
     * @todo   Implement testGet().
     */
    public function testSetGet()
    {
        $this->object->set('a/b/c', 123);
        $this->assertEquals(123, $this->object->get('a/b/c'));
        $this->assertArrayHasKey('c', $this->object->get('a/b'));
        $this->object->set('a/b', 456);
        $this->assertEquals(456, $this->object->get('a/b/'));
        $this->assertNotInternalType('array', $this->object->get('a/b'), 'kill array');
        $this->assertEmpty($this->object->get('a/b/c'), 'unexisting key');
    }

    public function testRef()
    {
        $y = &$this->object->ref('x/y');
        self::assertEquals(456, $y);
        $y = 'y';
        self::assertEquals('y', $this->object->get('x/y'));
    }

    public function testRefUndefined2()
    {
        $z = &$this->object->ref('x/z');
        self::assertEmpty($z);
        $z = 'z';
        self::assertEquals('z', $this->object->get('x/z'));
    }

    public function testRefUndefined3()
    {
        $w = &$this->object->ref('x/z/w');
        self::assertEmpty($w);
        $w = 'w';
        self::assertEquals('w', $this->object->get('x/z/w'));
    }

    public function testSetref()
    {
        $this->object->var = 123;
        $this->object->setref('v/z', $this->object->var);
        return $this->object;
    }
    /**
     * @depends testSetref
     * @param type $object
     * @return type
     */
    public function testSetref1($object)
    {
        self::assertEquals(123, $object->get('v/z'));
        $object->set('v/z', 456);
        return $object;
    }
    /**
     * @depends testSetref
     * @param type $object
     */
    public function testSetref2($object)
    {
        self::assertEquals(456, $object->var);
        return ($object);
    }

    /**
     * @depends testSetref2
     * @param type $object
     * @return type
     */
    public function testUnref($object)
    {
        unset($object['v']);
        $object->set('v', 789);
        self::assertEquals(456, $object->var);
    }

    public function testAdd()
    {
        $this->object->add('n/a', 123);
        $this->object->add('n/a', 456);
        self::assertEquals([123, 456], $this->object->get('n/a'));
    }

    public function testAddUndefined()
    {
        $this->object->add('array', 123);
        $this->object->add('array', 456);
        self::assertEquals([123, 456], $this->object->get('array'));
    }

    public function testAddref()
    {
        $x = $y = 0;
        $this->object->addref('array', $x);
        $this->object->addref('array', $y);
        $x = 123;
        $y = 456;
        self::assertEquals([123, 456], $this->object->get('array'));
    }

//    /**
//     * @covers Ailixter\Gears\Collection\Data::getIterator
//     * @todo   Implement testGetIterator().
//     */
//    public function testGetIterator()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//            'This test has not been implemented yet.'
//        );
//    }

    public function testCount()
    {
        self::assertEquals(2, count($this->object));
    }

    public function testOffsetSet()
    {
        $this->object['w/a'] = 123;
        $this->object['w/b'] = 456;
        self::assertEquals(['a' => 123, 'b' => 456], $this->object['w']);
    }

    public function testOffsetUnset()
    {
        $this->object['w/a'] = 123;
        $this->object['w/b'] = 456;
        unset($this->object['w/b']);
        self::assertEquals(['a' => 123], $this->object['w']);
    }

    /**
     * @covers Ailixter\Gears\Collection\Data::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testExtract()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ailixter\Gears\Collection\Data::offsetGet
     * @todo   Implement testOffsetGet().
     */
    public function testBuild()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testArrayObject()
    {
        $test = new Struct(new \ArrayObject(['a' => ['b' => 123, 456]]));
        $y = &$test->ref('a/b');
        self::assertEquals(123, $y);
        $y = 'y';
        self::assertEquals('y', $test->get('a/b'));
    }
}
