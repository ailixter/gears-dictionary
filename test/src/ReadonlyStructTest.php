<?php

namespace Ailixter\Gears\Dictionary;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-11-01 at 15:17:19.
 */
class ReadonlyStructTest extends TestCase
{
    /**
     * @var ReadonlyStruct
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = (new ReadonlyStruct(self::$sdata))->setPathSeparator(',');
    }

    private static $sdata = [
        [123, 456],
        'x' => [
            123,
            'y' => 456
        ]
    ];
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function testAll()
    {
        self::assertEquals(self::$sdata, $this->object->all());
    }

    public function getProvider()
    {
        return [
//            [[], self::$sdata],
//            [[0, 1], 456],
//            [['x', 0], 123],
//            [['x', 'y'], 456],
//            [0, [123, 456]],
//            [1, null, null, false],
            [[1, 0], 'null', 'null', false],
            [['undefined'], 'undefined', function () { return 'undefined'; }, false],
        ];
    }

    /**
     * @dataProvider getProvider
     */
    public function testHas($path, $expected, $default = null, $exists = true)
    {
        self::assertSame($exists, $this->object->has($path), json_encode($expected));
    }

    /**
     * @dataProvider getProvider
     */
    public function testRequired($path, $expected, $default = null, $exists = true)
    {
        if (!$exists) {
            self::expectException(Exceptions\RequiredKeyException::class);
        }
        self::assertSame($expected, $this->object->required($path, $default));
    }

    public function getPathProvider()
    {
        return [
            ['', self::$sdata],
            ['0, 1', 456],
            ['x, 0', 123],
            ['x, y', 456],
            ['0', [123, 456]],
            ['1', null, null, false],
            ['1, 0', 'null', 'null', false],
            ['undefined', 'undefined', function () { return 'undefined'; }, false],
        ];
    }

    /**
     * @dataProvider getPathProvider
     */
    public function testGetPath($path, $expected, $default = null)
    {
        self::assertSame($expected, $this->object->get($path, $default));
    }

    public function testCount()
    {
        self::assertEquals(2, count($this->object));
    }

    /**
     * @expectedException Ailixter\Gears\Dictionary\Exceptions\AccessException
     */
    public function testOffsetSet()
    {
        $this->object['x, y'] = 1;
    }

    /**
     * @dataProvider getProvider
     */
    public function testOffsetExists($path, $expected, $default = null, $exists = true)
    {
        self::assertSame($exists, isset($this->object[$path]), json_encode($expected));
    }

    /**
     * @expectedException Ailixter\Gears\Dictionary\Exceptions\AccessException
     */
    public function testOffsetUnset()
    {
        unset($this->object['x, y']);
    }

    /**
     */
    public function testOffsetGet()
    {
        self::assertEquals(456, $this->object['x, y']);
    }

}
