<?php

namespace Ailixter\Gears\Dictionary;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-10-28 at 18:52:46.
 */
class ReadonlyFlatTest extends TestCase
{
    /**
     * @var ReadonlyFlat
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ReadonlyFlat(new \ArrayObject(['x' => 123]));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function testGet()
    {
        self::assertSame(123, $this->object->get('x'));
    }

    public function testGetDefaultNull()
    {
        self::assertSame(null, $this->object->get('undefined'));
    }

    public function testGetDefaultValue()
    {
        self::assertSame(123, $this->object->get('undefined', 123));
    }

    public function testGetDefaultCalculatedValue()
    {
        self::assertSame('object:undefined', $this->object->get('undefined', function ($k, $a) {
            return gettype($a).':'.$k;
        }));
    }

    public function testHas()
    {
        self::assertTrue($this->object->has('x'));
    }

    public function testHasNot()
    {
        self::assertFalse($this->object->has('undefined'));
    }

    public function testNotArrayHas()
    {
        self::assertFalse((new ReadonlyFlat(null))->has('x'), 'null');
        self::assertFalse((new ReadonlyFlat(123))->has('x'), 'int');
        self::assertFalse((new ReadonlyFlat('x'))->has('x'), 'str');
    }

    public function testRequired()
    {
        self::assertSame(123, $this->object->required('x'));
    }

    /**
     * @expectedException Ailixter\Gears\Dictionary\Exceptions\RequiredKeyException
     */
    public function testRequiredFailure()
    {
        self::assertNotEmpty($this->object->required('undefined'));
    }

    public function testGetFromArrayObject()
    {
        self::assertSame(123, $this->object->get('x'));
    }

    public function testArrayObjectHas()
    {
        self::assertTrue($this->object->has('x'));
    }

    public function testArrayObjectHasNot()
    {
        self::assertFalse($this->object->has('undefined'));
    }
}
